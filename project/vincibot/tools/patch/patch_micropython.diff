diff --git a/py/modthread.c b/py/modthread.c
index 29b765493..daf3fad65 100644
--- a/py/modthread.c
+++ b/py/modthread.c
@@ -231,17 +231,35 @@ STATIC mp_obj_t mod_thread_start_new_thread(size_t n_args, const mp_obj_t *args)
     mp_obj_t *pos_args_items;
     mp_obj_get_array(args[1], &pos_args_len, &pos_args_items);
 
+    int thread_priority = MP_THREAD_PRIORITY_DEFAULT;
+    int thread_stack_type = MP_THREAD_STACK_TYPE_DEFAULT;
+    
     // check for keyword arguments
-    if (n_args == 2) {
+    if (n_args >= 2 && n_args <= 4) {
+        if(n_args == 2)
+        {
+          thread_priority = MP_THREAD_PRIORITY_DEFAULT;
+          thread_stack_type = MP_THREAD_STACK_TYPE_DEFAULT;
+        }
+        else if(n_args == 3)
+        {
+          thread_priority = abs(mp_obj_get_int(args[2]));
+          thread_stack_type = MP_THREAD_STACK_TYPE_DEFAULT;
+        }
+        else if(n_args == 4)
+        {
+          thread_priority = abs(mp_obj_get_int(args[2]));
+          thread_stack_type = abs(mp_obj_get_int(args[3]));
+        }
         // just position arguments
         th_args = m_new_obj_var(thread_entry_args_t, mp_obj_t, pos_args_len);
         th_args->n_kw = 0;
     } else {
         // positional and keyword arguments
-        if (mp_obj_get_type(args[2]) != &mp_type_dict) {
+        if (mp_obj_get_type(args[4]) != &mp_type_dict) {
             mp_raise_TypeError(MP_ERROR_TEXT("expecting a dict for keyword args"));
         }
-        mp_map_t *map = &((mp_obj_dict_t *)MP_OBJ_TO_PTR(args[2]))->map;
+        mp_map_t *map = &((mp_obj_dict_t *)MP_OBJ_TO_PTR(args[4]))->map;
         th_args = m_new_obj_var(thread_entry_args_t, mp_obj_t, pos_args_len + 2 * map->used);
         th_args->n_kw = map->used;
         // copy across the keyword arguments
@@ -268,11 +286,11 @@ STATIC mp_obj_t mod_thread_start_new_thread(size_t n_args, const mp_obj_t *args)
     th_args->fun = args[0];
 
     // spawn the thread!
-    mp_thread_create(thread_entry, th_args, &th_args->stack_size);
+    mp_thread_create(thread_entry, th_args, thread_priority, thread_stack_type, &th_args->stack_size);
 
     return mp_const_none;
 }
-STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mod_thread_start_new_thread_obj, 2, 3, mod_thread_start_new_thread);
+STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mod_thread_start_new_thread_obj, 2, 5, mod_thread_start_new_thread);
 
 STATIC mp_obj_t mod_thread_exit(void) {
     mp_raise_type(&mp_type_SystemExit);
diff --git a/py/mpthread.h b/py/mpthread.h
index e611ef4c1..dd15e950a 100644
--- a/py/mpthread.h
+++ b/py/mpthread.h
@@ -38,9 +38,15 @@ struct _mp_state_thread_t;
 #include <mpthreadport.h>
 #endif
 
+#define MP_THREAD_STACK_TYPE_INTERNEL                     (1)
+#define MP_THREAD_STACK_TYPE_SPIRAM                       (2)
+
+#define MP_THREAD_PRIORITY_DEFAULT                        (1)
+#define MP_THREAD_STACK_TYPE_DEFAULT                      (1)
+
 struct _mp_state_thread_t *mp_thread_get_state(void);
 void mp_thread_set_state(struct _mp_state_thread_t *state);
-void mp_thread_create(void *(*entry)(void *), void *arg, size_t *stack_size);
+void mp_thread_create(void *(*entry)(void*), void *arg, int thread_priority, int thread_stack_type, size_t *stack_size);
 void mp_thread_start(void);
 void mp_thread_finish(void);
 void mp_thread_mutex_init(mp_thread_mutex_t *mutex);
